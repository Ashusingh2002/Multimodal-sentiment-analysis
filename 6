FetchDropdownValues(field: Field) {
  const apiParam = this.fieldToApiParam[field.name];
  if (!apiParam) return;

  // Build filters for all other fields
  const filters: Record<string, string> = {};
  this.fields.forEach((f: Field) => {
    const paramKey = this.fieldToApiParam[f.name];
    if (paramKey && f.value.length > 0 && f.name !== field.name) {
      filters[paramKey] = f.value.join(','); // âœ… comma-separated
    }
  });

  // Handle Measure separately
  if (field.name === 'Measure') {
    ['is_raw_available', 'is_std_available'].forEach((measureKey: string) => {
      const measureFilters: Record<string, string> = { ...filters };

      this.fields.forEach((f: Field) => {
        const key = this.fieldToApiParam[f.name];
        if (key && f.value.length > 0) {
          measureFilters[key] = f.value.join(',');
        }
      });

      this.filterService.getDropdownValues(measureKey, measureFilters).subscribe((res: any) => {
        const addVal = measureKey === 'is_raw_available' ? 'Raw' : 'Std';
        if (res.uniqueValues?.includes(true)) {
          if (!field.values.includes(addVal)) field.values.push(addVal);
        } else {
          const idx = field.values.indexOf(addVal);
          if (idx >= 0) field.values.splice(idx, 1);
        }
      });
    });
    return;
  }

  // Normal fields
  this.filterService.getDropdownValues(apiParam, filters).subscribe((res: any) => {
    if (!this.childValueSources[field.name]) this.childValueSources[field.name] = {};
    const sources = this.childValueSources[field.name];

    const newValues: string[] = res.uniqueValues ?? [];
    newValues.forEach((v: string) => {
      if (!field.values.includes(v)) field.values.push(v);

      if (!sources[v]) sources[v] = new Set<string>();
      Object.values(filters).forEach((parentVals: string) => {
        parentVals.split(',').forEach((p: string) => sources[v].add(p));
      });
    });

    // Remove any previously selected value no longer valid
    field.value = field.value.filter(v => field.values.includes(v));
  }, () => {
    field.values = [];
    field.value = [];
    this.snackBar.open(`API call failed for field ${field.name}`, 'Close', { duration: 3000 });
  });
}
onFieldValueAdd(parentField: Field, value: string) {
  this.fields.forEach((childField: Field) => {
    if (childField.name === parentField.name) return;

    const apiParam = this.fieldToApiParam[childField.name];
    if (!apiParam) return;

    const filters: Record<string, string> = {};
    const parentKey = this.fieldToApiParam[parentField.name];
    if (!parentKey) return;

    filters[parentKey] = value;

    this.filterService.getDropdownValues(apiParam, filters).subscribe((res: any) => {
      const newValues: string[] = res.uniqueValues ?? [];
      if (!this.childValueSources[childField.name]) this.childValueSources[childField.name] = {};
      const sources = this.childValueSources[childField.name];

      newValues.forEach((v: string) => {
        if (!childField.values.includes(v)) childField.values.push(v);
        if (!childField.value.includes(v)) childField.value.push(v);

        if (!sources[v]) sources[v] = new Set<string>();
        sources[v].add(value);
      });
    });
  });
}

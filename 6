updateFieldUniqueConstant(field: Field) {
  if (!field.value || field.value.length === 0) {
    field.unique = 0;
    field.constant = 0;
    return;
  }

  // Build selected fields object for API
  const selectedFields: Record<string, string[]> = {};
  this.fields.forEach(f => {
    if (f.value.length > 0) selectedFields[f.name] = f.value;
  });

  this.fieldService.fetchFieldData(field.name, field.value, selectedFields).subscribe({
    next: (res) => {
      field.unique = res.unique ?? 0;
      field.constant = res.constant ?? 0;
      console.log('API response for field', field.name, res);
    },
    error: () => {
      field.unique = 0;
      field.constant = 0;
      this.snackBar.open('API call failed for field ' + field.name, 'Close', { duration: 3000 });
    }
  });
}
fetchFieldData(fieldName: string, fieldValues: string[], selectedFields: Record<string, string[]>): Observable<any> {
    let params = new HttpParams()
      .set('fieldName', fieldName)
      .set('fieldValues', fieldValues.join(','));

    Object.keys(selectedFields).forEach(key => {
      if (selectedFields[key].length) {
        params = params.set(key.toLowerCase(), selectedFields[key].join(','));
      }
    });

    return this.http.get<any>(this.apiUrl, { params });
  }    this.updateFieldUniqueConstant(field);

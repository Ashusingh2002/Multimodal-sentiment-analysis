filterOptions(field: Field): string[] {
  const search = (field.searchText || '').toLowerCase();

  return (field.values || [])
    .filter(opt => !field.value.includes(opt)) // exclude already selected
    .filter(opt => opt.toLowerCase().includes(search)) // keep matches
    .sort((a, b) => {
      const aIndex = a.toLowerCase().indexOf(search);
      const bIndex = b.toLowerCase().indexOf(search);

      // First: prioritize matches at the start
      if (aIndex !== bIndex) return aIndex - bIndex;

      // Second: shorter strings come first
      return a.length - b.length;
    });
}

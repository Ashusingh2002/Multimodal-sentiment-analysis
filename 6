filterOptions(field: Field) {
  const search = (field.searchText || '').toLowerCase();

  // Build filters from other fields
  const filters: Record<string, string[]> = {};
  this.fields.forEach(f => {
    if (f !== field && f.value.length > 0) {
      const jsonKey = this.fieldToJsonKey[f.name];
      if (jsonKey) {
        filters[jsonKey] = f.value;
      }
    }
  });

  // Filter entries
  const filteredEntries = this.entries.filter(e =>
    Object.keys(filters).every(jsonKey =>
      filters[jsonKey].some(val => e[jsonKey] === val)
    )
  );

  // For Basket_Name, always show all unique options from filtered entries
  const allowedValues = field.name === 'Basket_Name'
    ? [...new Set(this.entries.map(e => e['basket_name']))]
    : [...new Set(filteredEntries.map(e => e[this.fieldToJsonKey[field.name] as string]))];

  return allowedValues
    .filter(opt => opt && !field.value.includes(opt))
    .filter(opt => opt.toLowerCase().includes(search));
}

  if (field.name === 'Measure') {
    const measureValues: string[] = [];

    // Call API for is_raw_available
    this.filterService.getDropdownValues('is_raw_available', filters).subscribe({
      next: (res) => {
        if (res.uniqueValues && res.uniqueValues.includes('true')) {
          measureValues.push('Raw');
        }

        // Call API for is_std_available
        this.filterService.getDropdownValues('is_std_available', filters).subscribe({
          next: (res2) => {
            if (res2.uniqueValues && res2.uniqueValues.includes('true')) {
              measureValues.push('Std');
            }

            // Populate Measure field values
            field.values = measureValues;

            // Remove any previously selected value that is no longer available
            field.value = field.value.filter(v => field.values.includes(v));
          },
          error: () => {
            this.snackBar.open(`API call failed for Measure (Std)`, 'Close', { duration: 3000 });
          }
        });
      },
      error: () => {
        this.snackBar.open(`API call failed for Measure (Raw)`, 'Close', { duration: 3000 });
      }
    });

    return; // stop normal logic
  }

 if (field.name === 'Measure') {
    const measureField = this.fields.find(f => f.name === 'Measure');
    const measureFilters: Record<string, boolean> = { ...filters };

    if (measureField?.value.includes('Raw')) measureFilters['is_raw_available'] = true;
    if (measureField?.value.includes('Std')) measureFilters['is_std_available'] = true;

    this.filterService.getDropdownValues('measure', measureFilters).subscribe({
      next: (res) => {
        const updatedValues: string[] = [];

        if (res.uniqueValues?.includes('is_raw_available_true')) updatedValues.push('Raw');
        if (res.uniqueValues?.includes('is_std_available_true')) updatedValues.push('Std');

        field.values = updatedValues;
        field.unique = res.unique ?? 0;
        field.constant = res.constant ?? 0;
      },
      error: () => {
        field.values = [];
        field.unique = 0;
        field.constant = 0;
        this.snackBar.open(`API call failed for Measure`, 'Close', { duration: 3000 });
      }
    });

    return; // skip normal logic
  }

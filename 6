FetchDropdownValues(field: Field) {
  const apiParam = this.fieldToApiParam[field.name];
  if (!apiParam) return;

  // Build filters for all other fields
  const filters: Record<string, string> = {};
  this.fields.forEach(f => {
    const paramKey = this.fieldToApiParam[f.name];
    if (paramKey && f.value.length > 0 && f.name !== field.name) {
      filters[paramKey] = f.value.join(','); // âœ… comma-separated
    }
  });

  // Handle Measure mapping to booleans
  const measureField = this.fields.find(f => f.name === 'Measure');
  if (measureField?.value.length) {
    if (measureField.value.includes('Raw')) filters['is_raw_available'] = 'true';
    if (measureField.value.includes('Std')) filters['is_std_available'] = 'true';
  }

  this.filterService.getDropdownValues(apiParam, filters).subscribe({
    next: (res) => {
      console.log(`API response for ${field.name}:`, res);

      // Populate dropdown options
      field.values = res.uniqueValues ?? [];

      // Optional: remove any previously selected value that is no longer available
      field.value = field.value.filter(v => field.values.includes(v));
    },
    error: () => {
      field.values = [];
      field.value = [];
      this.snackBar.open(`API call failed for field ${field.name}`, 'Close', { duration: 3000 });
    }
  });
}

updateFieldUniqueConstant(field: Field) {
  if (!field.value || field.value.length === 0) {
    field.unique = 0;
    field.constant = 0;
    return;
  }

  const apiParam = this.fieldToApiParam[field.name];
  if (!apiParam) return;

  // Build filters for all other fields (exclude the current field)
  const filters: Record<string, string | boolean> = {};
  this.fields.forEach(f => {
    const paramKey = this.fieldToApiParam[f.name];
    if (paramKey && f.value.length > 0 && f.name !== field.name) {
      filters[paramKey] = f.value.join(',');
    }
  });

  // Include selected values of the current field itself in a separate param
  filters[apiParam] = field.value.join(',');

  // Handle Measure mapping to booleans
  const measureField = this.fields.find(f => f.name === 'Measure');
  if (measureField?.value.length) {
    filters['is_raw_available'] = measureField.value.includes('Raw');
    filters['is_std_available'] = measureField.value.includes('Std');
  }

  // API call
  this.filterService.getDropdownValues(apiParam, filters).subscribe({
    next: (res) => {
      console.log(`API response for unique/constant of ${field.name}:`, res);
      field.unique = res.unique ?? 0;
      field.constant = res.constant ?? 0;
    },
    error: () => {
      field.unique = 0;
      field.constant = 0;
      this.snackBar.open(`API call failed for field ${field.name}`, 'Close', { duration: 3000 });
    }
  });
}

// ================================
// File: src/app/app.module.ts
// ================================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { CustomMultiSelectComponent } from './custom-multiselect.component';

@NgModule({
  declarations: [AppComponent, CustomMultiSelectComponent],
  imports: [BrowserModule, FormsModule],
  bootstrap: [AppComponent]
})
export class AppModule {}


// ================================
// File: src/app/custom-multiselect.component.ts
// ================================
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-custom-multiselect',
  template: `
  <div class="multi">
    <div class="chip-row" (click)="toggleOpen()">
      <span class="chip" *ngFor="let s of displayValues">{{s}}</span>
      <span *ngIf="hiddenCount>0" class="chip">+{{hiddenCount}} more</span>
      <input placeholder="Type or paste list and press Enter" (keydown.enter)="onPasteInput($event)" #textinput />
      <button type="button" class="caret">▾</button>
    </div>

    <div class="dropdown" *ngIf="open">
      <label class="textarea-label">Paste newline/comma separated values:</label>
      <textarea [(ngModel)]="pasteText" rows="4"></textarea>
      <div class="actions">
        <button (click)="applyPaste()">Apply</button>
        <button (click)="clearAll()">Clear</button>
      </div>
      <div class="list">
        <label *ngFor="let opt of options; index as i">
          <input type="checkbox" [(ngModel)]="selectedMap[opt]" (change)="onCheckboxChange()"> {{opt}}
        </label>
      </div>
    </div>

  </div>
  `,
  styles: [`
    .multi { position: relative; font-family: Arial, Helvetica, sans-serif; }
    .chip-row{ min-height:40px; border:1px solid #cfd8dc; padding:6px; display:flex; align-items:center; gap:6px; flex-wrap:wrap; cursor:pointer; }
    .chip{ background:#e0f2f1; padding:6px 8px; border-radius:16px; font-size:13px; }
    .caret{ margin-left:auto; }
    .dropdown{ position:absolute; z-index:20; left:0; right:0; background:#fff; border:1px solid #cfd8dc; padding:10px; box-shadow:0 2px 6px rgba(0,0,0,0.08); }
    textarea{ width:100%; }
    .list{ max-height:150px; overflow:auto; margin-top:8px; }
    .actions{ margin-top:6px; display:flex; gap:8px; }
  `]
})
export class CustomMultiSelectComponent {
  @Input() options: string[] = [];
  @Input() selected: string[] = [];
  @Output() selectedChange = new EventEmitter<string[]>();

  open = false;
  pasteText = '';
  selectedMap: { [k:string]: boolean } = {};

  ngOnInit(){
    this.options = Array.from(new Set(this.options));
    for(const o of this.options){ this.selectedMap[o] = this.selected.includes(o); }
  }

  toggleOpen(){ this.open = !this.open; }

  get displayValues(){
    const chosen = this.options.filter(o=>this.selectedMap[o]);
    return chosen.slice(0,3);
  }

  get hiddenCount(){
    const total = this.options.filter(o=>this.selectedMap[o]).length;
    return Math.max(0, total-3);
  }

  onPasteInput(e: any){
    const val = e.target.value?.trim();
    if(!val) return;
    // allow enter to add a single item
    const normalized = val.replace(/,/g,'\n');
    const parts = normalized.split(/\n+/).map(s=>s.trim()).filter(Boolean);
    for(const p of parts){ if(this.options.indexOf(p)===-1) this.options.push(p); this.selectedMap[p]=true; }
    e.target.value='';
    this.emitSelected();
  }

  applyPaste(){
    const normalized = this.pasteText.replace(/,/g,'\n');
    const parts = normalized.split(/\n+/).map(s=>s.trim()).filter(Boolean);
    for(const p of parts){ if(this.options.indexOf(p)===-1) this.options.push(p); this.selectedMap[p]=true; }
    this.pasteText=''; this.emitSelected();
  }

  clearAll(){ this.selectedMap = {}; this.emitSelected(); }

  onCheckboxChange(){ this.emitSelected(); }

  emitSelected(){
    const list = this.options.filter(o=>this.selectedMap[o]);
    this.selected = list;
    this.selectedChange.emit(list);
  }
}


// ================================
// File: src/app/app.component.ts
// ================================
import { Component } from '@angular/core';

interface FilterInfo {
  key: string;
  label: string;
  options: string[];
  selected: string[];
  matches: number;
  universe: number;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  filters: FilterInfo[] = [
    { key: 'basketTicker', label: 'Basket Ticker', options: ['BCRERETL','BASK-USD','ALPHA'], selected: [], matches: 0, universe: 174432 },
    { key: 'factorCode', label: 'Factor Code', options: ['Equity','Macro','Credit','Macro-2'], selected: [], matches: 0, universe: 174432 },
    { key: 'factorMacro', label: 'Factor Macro', options: ['EU','US','APAC','LatAm'], selected: [], matches: 0, universe: 174432 },
    { key: 'basketRegion', label: 'Basket Region', options: ['Sentiment','Macro','Micro'], selected: [], matches: 0, universe: 174432 },
    { key: 'factorGroup', label: 'Factor Group Name', options: ['Macro','Sector','Style'], selected: [], matches: 0, universe: 174432 }
  ];

  // measure chips
  measure: 'raw'|'std' = 'raw';

  // plotting rows
  plotRangeFrom: number|null = null;
  plotRangeTo: number|null = null;
  maxRows = 50;

  // show only two filter boxes initially (but per requirement we show 5 upfront - keep responsive)
  showAllFilters = true; // user asked 5 upfront so true

  // simulate backend counts on change
  updateCountsForFilter(f: FilterInfo){
    // crude simulation: matches = number of selected * random factor
    const selCount = f.selected.length || 1;
    f.matches = selCount * Math.floor(20 + Math.random()*200);
    // universe slightly reduced
    f.universe = 174432 - selCount * Math.floor(Math.random()*1000);
  }

  onFilterChange(idx:number, selected:string[]){
    this.filters[idx].selected = selected;
    this.updateCountsForFilter(this.filters[idx]);
  }

  deleteFilter(idx:number){
    // localized delete — remove selections
    this.filters[idx].selected = [];
    this.updateCountsForFilter(this.filters[idx]);
  }

  infoFilter(idx:number){
    alert(`${this.filters[idx].label} info:\nThis filter lets you choose values or paste a list. Selected values show as chips. Matches/Universe update live.`);
  }

  toggleMeasure(m:'raw'|'std'){
    this.measure = m;
  }

  search(){
    // prioritize range if present and valid
    if(this.plotRangeFrom!=null && this.plotRangeTo!=null){
      const from = Number(this.plotRangeFrom);
      const to = Number(this.plotRangeTo);
      const rows = Math.max(0, to - from + 1);
      if(rows>this.maxRows){ alert(`Range too big. Maximum ${this.maxRows} rows allowed.`); return; }
      alert(`Searching with range ${from}..${to} (${rows} rows) and measure ${this.measure}`);
      return;
    }

    // otherwise collect checked items (simulate prioritization)
    const checkedRows = this.filters.reduce((acc,f)=> acc + f.selected.length,0);
    if(checkedRows>this.maxRows){ alert(`Too many rows selected across filters. Max ${this.maxRows}.`); return; }
    alert(`Searching with ${checkedRows} selected items across filters. Measure: ${this.measure}`);
  }
}


// ================================
// File: src/app/app.component.html
// ================================

` + `
<div class="container">
  <h1>Factorlab Filters</h1>

  <div class="filters-grid">
    <div class="filter" *ngFor="let f of filters; index as i">
      <div class="filter-header">
        <strong>{{f.label}}</strong>
        <div class="actions">
          <button class="icon" (click)="infoFilter(i)" title="Info">i</button>
          <button class="icon" (click)="deleteFilter(i)" title="Clear">⊗</button>
        </div>
      </div>

      <app-custom-multiselect [options]="f.options" [selected]="f.selected" (selectedChange)="onFilterChange(i,$event)"></app-custom-multiselect>

      <div class="live-counters">
        <small>{{f.matches}} Matches | {{f.universe}} Universe</small>
      </div>
    </div>
  </div>

  <div class="measure-row">
    <div class="chips">
      <button class="measure-chip" [class.active]="measure==='raw'" (click)="toggleMeasure('raw')">raw</button>
      <button class="measure-chip" [class.active]="measure==='std'" (click)="toggleMeasure('std')">std</button>
    </div>

    <div class="plot-controls">
      <label>Plot Rows: Range</label>
      <input type="number" [(ngModel)]="plotRangeFrom" placeholder="from" min="1" />
      <input type="number" [(ngModel)]="plotRangeTo" placeholder="to" min="1" />
      <button class="search" (click)="search()">Search</button>
    </div>
  </div>

  <div class="footer-note">Max rows enforced: {{maxRows}}</div>
</div>
` + `

// ================================
// File: src/app/app.component.css
// ================================

.container{ font-family: Arial, Helvetica, sans-serif; padding:20px; }
.filters-grid{ display:grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap:12px; align-items:start; }
.filter{ border:1px solid #e0e0e0; padding:10px; border-radius:6px; background:white; }
.filter-header{ display:flex; justify-content:space-between; align-items:center; margin-bottom:8px; }
.actions .icon{ background:none; border:1px solid #ddd; border-radius:12px; width:28px; height:28px; line-height:24px; }
.live-counters{ margin-top:6px; color:#607d8b; }
.measure-row{ display:flex; justify-content:space-between; align-items:center; margin-top:14px; gap:12px; }
.chips{ display:flex; gap:8px; }
.measure-chip{ padding:8px 12px; border-radius:16px; border:1px solid #b0bec5; background:#f5f5f5; }
.measure-chip.active{ background:#4caf50; color:white; border-color:#4caf50; }
.plot-controls{ display:flex; gap:8px; align-items:center; }
.search{ background:#1976d2; color:white; border:none; padding:8px 12px; border-radius:6px; }
.footer-note{ margin-top:12px; color:#9e9e9e; }

/* small responsive tweaks */
@media (max-width:700px){ .measure-row{ flex-direction:column; align-items:stretch; } }

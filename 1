import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatIconModule } from '@angular/material/icon';
import { MatListModule } from '@angular/material/list';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { FormsModule } from '@angular/forms';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatOptionModule } from '@angular/material/core';

interface Field {
  name: string;
  operator: string;
  value: string;
  matches: number;
  universe: number;
  values: string[];
  checked?: boolean;
}

@Component({
  selector: 'app-base-editor',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatButtonModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatIconModule,
    MatListModule,
    MatCheckboxModule,
    MatAutocompleteModule,
    MatOptionModule
  ],
  templateUrl: './base-editor.component.html',
  styleUrls: ['./base-editor.component.css']
})
export class BaseEditorComponent {
  dialog = inject(MatDialog);

  operators = ['Equals', 'Not Equals', 'Greater Than', 'Less Than'];

  fields: Field[] = []; // start empty

  // --- Search
  searchText = '';

  // Example criteria for search autocomplete
  allCriteria: string[] = [
    'Exchange Region',
    'ImpliedVol 1M',
    'ImpliedVol 3M',
    'ImpliedVol 6M',
    'ImpliedVol 12M',
    'ImpliedIndexSpread 12M',
    'Liquidity',
    'OptionChain'
  ];

  // Filtered options for autocomplete
  get filteredOptions(): string[] {
    if (!this.searchText) return [];
    return this.allCriteria.filter(c =>
      c.toLowerCase().includes(this.searchText.toLowerCase())
    );
  }

  // --- Popup state
  selectorOpen = false;
  menuLevels: any[][] = [];

  rootCategories = [
    {
      name: 'Research',
      children: [
        {
          name: 'ImpliedVol',
          children: [
            { name: '1M' },
            { name: '3M' },
            { name: '6M' },
            { name: '12M' }
          ]
        },
        {
          name: 'ImpliedIndexSpread',
          children: [{ name: '12M' }]
        }
      ]
    },
    {
      name: 'Data',
      children: [
        { name: 'Liquidity' },
        { name: 'OptionChain' }
      ]
    }
  ];

  constructor() {
    this.menuLevels = [this.rootCategories];
  }

  // --- Field actions
  removeField(index: number) {
    this.fields.splice(index, 1);
  }

  showInfo(field: Field) {
    alert(`Info about ${field.name}`);
  }

  updateResults() {
    alert('Update Results clicked');
  }

  setViewTemplate() {
    alert('Set View Template clicked');
  }

  // --- Search actions
  addField(selectedName: string) {
    const exists = this.fields.find(f => f.name === selectedName);
    if (exists) return; // avoid duplicates

    this.fields.push({
      name: selectedName,
      operator: 'Equals',
      value: '',
      matches: Math.floor(Math.random() * 100000),
      universe: 151760,
      values: ['AMERICAS', 'EUROPE', 'ASIA'],
      checked: false
    });

    this.searchText = ''; // clear search bar
  }

  // --- Browse Criteria popup
  openBrowse(templateRef: any) {
    this.selectorOpen = !this.selectorOpen;
    if (this.selectorOpen) {
      this.menuLevels = [this.rootCategories];
      this.dialog.open(templateRef, { width: '800px', height: '400px' });
    } else {
      this.dialog.closeAll();
    }
  }

  selectItem(item: any, level: number) {
    if (item.children && item.children.length) {
      this.menuLevels = this.menuLevels.slice(0, level + 1);
      this.menuLevels.push(item.children);
    } else {
      const exists = this.fields.find(f => f.name === item.name);
      if (exists) return; // avoid duplicates

      this.fields.push({
        name: item.name,
        operator: 'Equals',
        value: '',
        matches: Math.floor(Math.random() * 100000),
        universe: 151760,
        values: ['AMERICAS', 'EUROPE', 'ASIA'],
        checked: false
      });
      this.dialog.closeAll();
      this.selectorOpen = false;
    }
  }
}

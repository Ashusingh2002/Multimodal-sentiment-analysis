import { Component, inject, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatIconModule } from '@angular/material/icon';
import { MatListModule } from '@angular/material/list';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatOptionModule } from '@angular/material/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatTooltipModule } from '@angular/material/tooltip';
import {  ViewChild, ElementRef } from '@angular/core';


interface Field {
  name: string;
  value: string;
  unique: number;
  constant: number;
  values: string[];
  checked?: boolean;
}

@Component({
  selector: 'app-base-editor',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatButtonModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatIconModule,
    MatListModule,
    MatCheckboxModule,
    MatAutocompleteModule,
    MatOptionModule,
    MatTooltipModule    // <-- Add this
  ],
  templateUrl: './base-editor.component.html',
  styleUrls: ['./base-editor.component.css']
})
export class BaseEditorComponent {
  dialog = inject(MatDialog);
  data = inject(MAT_DIALOG_DATA);
  hoveredItem: any = null;

  @ViewChild('criteriaContainer') criteriaContainer!: ElementRef;
  @ViewChild('criteriaRows', { read: ElementRef }) criteriaRows!: ElementRef;

  // --- Fields
  fields: Field[] = [
    { name: 'Exchange Region', value: 'AMERICAS', unique: 120, constant: 151760, values: ['AMERICAS', 'EUROPE', 'ASIA'], checked: false },
    { name: 'ImpliedVol 1M', value: 'EUROPE', unique: 80, constant: 151760, values: ['AMERICAS', 'EUROPE', 'ASIA'], checked: false },
    { name: 'Liquidity', value: 'ASIA', unique: 200, constant: 151760, values: ['AMERICAS', 'EUROPE', 'ASIA'], checked: false }
  ];

  // --- Search
  searchText = '';
  allCriteria: string[] = [
    'Exchange Region',
    'ImpliedVol 1M',
    'ImpliedVol 3M',
    'ImpliedVol 6M',
    'ImpliedVol 12M',
    'Liquidity',
    'OptionChain'
  ];

  get filteredOptions(): string[] {
    if (!this.searchText) return [];
    return this.allCriteria.filter(c =>
      c.toLowerCase().includes(this.searchText.toLowerCase())
    );
  }

  // --- Popup state
  selectorOpen = false;
  menuLevels: any[][] = [];
  browseDialogRef: any; // <-- store the currently open browse dialog
  rootCategories = [
    { name: 'Research', children: [{ name: 'ImpliedVol', children: [{ name: '1M' }, { name: '3M' }, { name: '6M' }, { name: '12M' }] }] },
    { name: 'Data', children: [{ name: 'Liquidity' }, { name: 'OptionChain' }] }
  ];

  constructor() {
    this.menuLevels = [this.rootCategories];
  }

  // --- Actions
  removeField(index: number) {
    this.fields.splice(index, 1);
  }

  showInfo(field: Field) {
    alert(`Info about ${field.name}`);
  }

  updateResults() {
    alert('Update Results clicked');
  }

  addField(selectedName: string) {
    const exists = this.fields.find(f => f.name === selectedName);
    if (exists) return;

    this.fields.push({
      name: selectedName,
      value: '',
      unique: Math.floor(Math.random() * 200),
      constant: 151760,
      values: ['AMERICAS', 'EUROPE', 'ASIA'],
      checked: false
    });

    this.searchText = '';
      setTimeout(() => {
    if (this.criteriaContainer) {
      this.criteriaContainer.nativeElement.scrollTop = this.criteriaContainer.nativeElement.scrollHeight;
    }
  });
  }

  // --- Browse Dialog
// --- Browse Dialog
openBrowse(templateRef: TemplateRef<any>) {
  // Reset the menu to root every time
   this.hoveredItem = null;
  this.menuLevels = [this.rootCategories];

  this.selectorOpen = true;

this.browseDialogRef = this.dialog.open(templateRef, {
      width: '1000px',
      height: '600px',
      maxWidth: '90vw',
      maxHeight: '90vh',
  disableClose: false,
  autoFocus: true
});


  this.browseDialogRef.afterClosed().subscribe(() => {
    this.selectorOpen = false;
    this.browseDialogRef = null;
  });
}





selectItem(item: any, level: number) {
  if (item.children && item.children.length) {
    this.menuLevels = this.menuLevels.slice(0, level + 1);
    this.menuLevels.push(item.children);

    // auto-scroll last level into view
    setTimeout(() => {
      const levels = document.querySelectorAll('.menu-level');
      const lastLevel = levels[levels.length - 1] as HTMLElement;
      lastLevel?.scrollIntoView({ behavior: 'smooth', inline: 'start' });
    });
  } else {
    this.addField(item.name);

    if (this.browseDialogRef) {
      this.browseDialogRef.close();
    }
  }
}



  closeBase() {
  this.dialog.closeAll(); // close BaseEditor
  if (this.data?.reopenParent) {
    this.data.reopenParent(); // reopen Equity popup
  }
}


}


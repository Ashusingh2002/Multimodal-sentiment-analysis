updateResults() {
  const mandatoryFields = ['Basket_Name', 'Factor_Description', 'Measure'];
  const missing = mandatoryFields.filter(f => {
    const field = this.fields.find(x => x.name === f);
    return !field || field.value.length === 0;
  });

  if (missing.length > 0) {
    this.snackBar.open(
      'Please select at least one value for all mandatory fields',
      'Close',
      { duration: 3000, verticalPosition: 'top' }
    );
    return;
  }

  // Build filters object for API
  const filters: Record<string, string[]> = {};
  this.fields.forEach(f => {
    if (f.value.length > 0) {
      filters[f.name] = f.value;
    }
  });

  // Call service
  this.filterService.getResults(filters).subscribe({
    next: (res: any) => {
      this.results = res; // assuming API returns array of rows
      this.selectedRows.clear();
      this.selectAllChecked = false;

      if (this.results.length === 0) {
        this.snackBar.open('No matching entries found', 'Close', {
          duration: 3000,
          verticalPosition: 'top'
        });
      }

      console.log('Filtered results:', this.results);
    },
    error: (err) => {
      console.error('Error fetching results', err);
      this.snackBar.open('Error fetching results', 'Close', { duration: 3000 });
    }
  });
}

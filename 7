// Map UI field labels â†’ API parameter keys
const fieldToApiParam: Record<string, string | null> = {
  'Basket_Name': 'basket_ticker',
  'Factor_Description': 'factor_code',
  'Factor_name': 'factor_name',
  'Factor_group_name': 'factor_group_name',
  'Basket_Region': 'basket_region',
  'Measure': null // special handling
};
loadDropdownValues(field: any) {
  // Optional: donâ€™t reload if already fetched
  if (field.values && field.values.length > 0) return;

  this.apiService.getDropdownOptions(field.parameter).subscribe((res: string[]) => {
    field.values = res;
  });
}

addValue(field: any, value: string) {
  if (value && !field.value.includes(value)) {
    field.value.push(value);
  }
  field.searchText = ''; // clear input after select
}

addFromInput(event: any, field: any) {
  const inputValue = (event.value || '').trim();
  if (inputValue && !field.value.includes(inputValue)) {
    field.value.push(inputValue);
  }
  event.chipInput!.clear();
  field.searchText = '';
}

removeValue(field: any, val: string) {
  const index = field.value.indexOf(val);
  if (index >= 0) field.value.splice(index, 1);
}
<mat-chip-grid #chipList>
  <mat-chip *ngFor="let val of field.value" removable (removed)="removeValue(field, val)">
    {{ val }}
    <button matChipRemove><mat-icon>cancel</mat-icon></button>
  </mat-chip>

  <input
    #chipInput
    placeholder="Type to search..."
    [matChipInputFor]="chipList"
    [matChipInputSeparatorKeyCodes]="separatorKeysCodes"
    [matAutocomplete]="auto"
    [(ngModel)]="field.searchText"
    (matChipInputTokenEnd)="addFromInput($event, field)"
    (focus)="loadDropdownValues(field)"  <!-- ðŸ‘ˆ call API when user focuses -->
  />
</mat-chip-grid>

<mat-autocomplete
  #auto="matAutocomplete"
  (optionSelected)="addValue(field, $event.option.value)">
  <mat-option *ngFor="let option of field.values" [value]="option">
    {{ option }}
  </mat-option>
</mat-autocomplete>

  getDropdownValues(fieldParam: string, filters: Record<string, string[]>): Observable<DropdownResponse> {
    let params = new HttpParams();
    Object.keys(filters).forEach(key => {
      filters[key].forEach(v => {
        params = params.append(key, v);
      });
    });

    // ðŸ‘‡ now typed to DropdownResponse instead of string[]
    return this.http.get<DropdownResponse>(`/api/unique/${fieldParam}`, { params });
  }
  fetchDropdownValues(field: Field) {
  const apiParam = this.fieldToApiParam[field.name];
  if (!apiParam) return;

  const filters: Record<string, string[]> = {};
  this.fields.forEach(f => {
    const paramKey = this.fieldToApiParam[f.name];
    if (paramKey && f.value.length > 0 && f.name !== field.name) {
      filters[paramKey] = f.value;
    }
  });

  this.filterService.getDropdownValues(apiParam, filters).subscribe(res => {
    console.log(`API response for ${field.name}:`, res);

    field.values = res.uniqueValues ?? [];   // dropdown options
    field.unique = res.matchCount ?? 0;      // match count
    field.constant = res.universeCount ?? 0; // universe count
  });
}
export interface DropdownResponse {
  uniqueValues: string[];
  matchCount: number;
  universeCount: number;
}
field.values = (res.uniqueValues ?? []).filter(v => v && v.trim() !== '');
  console.log(`ðŸ”¹ Requesting values for ${field.name} with filters:`, filters);


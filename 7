import { FilterService } from '../services/filter.service';

export class BaseEditorComponent {
  constructor(
    private snackBar: MatSnackBar,
    private dialog: MatDialog,
    private filterService: FilterService
  ) {}

  ngOnInit() {
    // Load basket names initially
    this.filterService.getBasketNames().subscribe(values => {
      const basketField = this.fields.find(f => f.name === 'Basket_Name');
      if (basketField) basketField.values = values;
    });
  }

  // Load values dynamically when a dropdown is opened for the first time
  loadDropdownValues(field: Field) {
    if (field.name === 'Basket_Name') {
      // Already loaded in ngOnInit
      return;
    }

    // Build current filter state (excluding the current field)
    const filters: Record<string, string[]> = {};
    this.fields.forEach(f => {
      if (f.name !== field.name && f.value.length > 0) {
        filters[f.name.toLowerCase()] = f.value;
      }
    });

    this.filterService.getDropdownValues(field.name.toLowerCase(), filters)
      .subscribe(values => {
        field.values = values;
      });
  }
}
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class FilterService {
  constructor(private http: HttpClient) {}

  // Always returns basket names
  getBasketNames(): Observable<string[]> {
    return this.http.get<string[]>('/api/basket-names');
  }

  // Returns filtered unique values for a dropdown
  getDropdownValues(field: string, filters: Record<string, string[]>): Observable<string[]> {
    let params = new HttpParams();
    Object.keys(filters).forEach(key => {
      filters[key].forEach(v => {
        params = params.append(key, v);
      });
    });

    return this.http.get<string[]>(`/api/unique/${field}`, { params });
  }
}
